##########本配置为测试环境配置例子，请根据实际情况修改地址
spring:
   datasource:
##数据库连接信息
      url: ${MYSQL_URL:jdbc:mysql://172.20.72.137/cas}?useUnicode=true&characterEncoding=UTF-8&useSSL=false
      username: ${MYSQL_USERNAME:root}
      password: ${MYSQL_PASSWORD:root}
      driver-class-name: com.mysql.cj.jdbc.Driver
###################以下为druid增加的配置###########################
      type: com.alibaba.druid.pool.DruidDataSource
# 下面为连接池的补充设置，应用到上面所有数据源中
      initialSize: 5
# 初始化大小，最小，最大
      minIdle: 5
      maxActive: 20
# 配置获取连接等待超时的时间
      maxWait: 60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
# 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙，此处是filter修改的地方
      filters:
         commons-log.connection-logger-name: stat,logback
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
      useGlobalDataSourceStat: true
      druid:
         filter:
            stat:
               log-slow-sql: true
   jpa:
      database: MYSQL
      show-sql: true
      database-platform: org.hibernate.dialect.MySQL8Dialect
      open-in-view: false
      hibernate:
         ddl-auto: update
         naming:
            physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
# druid管理登录用户名，与密码，访问地址为：http://<ip>:<port>/druid
loginUsername: root
loginPassword: 123456
eureka:
   client:
      service-url:
         defaultZone: http://macula:macula2019@172.20.72.131:8761/eureka/
macula:
   password:
      encodeType: MD5 #用户密码加密方式
   role:
      company_separated: true #角色是公司隔离还是全局通用
   user:
      different_source_actionable: true #用户是否source隔离 即是否可操作不同source的用户 true可操作 false不可操作
      username:
         company_separated: true #用户名是否公司隔离 即不同公司下是否username可以重复 还是全局不可重复